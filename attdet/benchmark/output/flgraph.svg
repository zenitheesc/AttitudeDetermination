<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="358" onload="init(evt)" viewBox="0 0 1200 358" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) {
				currentSearchTerm = term;
				search();
			}
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (currentSearchTerm === null) return;
		var term = currentSearchTerm;

		var re = new RegExp(term, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="358.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="341" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="341" > </text>
<g id="frames">
<g >
<title>__x64_sys_execve (6 samples, 0.04%)</title><rect x="1189.6" y="229" width="0.4" height="15.0" fill="rgb(207,189,22)" rx="2" ry="2" />
<text  x="1192.57" y="239.5" ></text>
</g>
<g >
<title>[unknown] (184 samples, 1.11%)</title><rect x="327.0" y="261" width="13.1" height="15.0" fill="rgb(231,193,37)" rx="2" ry="2" />
<text  x="329.98" y="271.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::compare (2 samples, 0.01%)</title><rect x="1120.5" y="277" width="0.2" height="15.0" fill="rgb(208,176,17)" rx="2" ry="2" />
<text  x="1123.53" y="287.5" ></text>
</g>
<g >
<title>common_interrupt (2 samples, 0.01%)</title><rect x="170.8" y="245" width="0.1" height="15.0" fill="rgb(219,227,52)" rx="2" ry="2" />
<text  x="173.80" y="255.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::compare (2 samples, 0.01%)</title><rect x="342.7" y="261" width="0.2" height="15.0" fill="rgb(251,178,40)" rx="2" ry="2" />
<text  x="345.71" y="271.5" ></text>
</g>
<g >
<title>__handle_irq_event_percpu (4 samples, 0.02%)</title><rect x="859.1" y="197" width="0.3" height="15.0" fill="rgb(207,225,49)" rx="2" ry="2" />
<text  x="862.07" y="207.5" ></text>
</g>
<g >
<title>do_execve (6 samples, 0.04%)</title><rect x="1189.6" y="213" width="0.4" height="15.0" fill="rgb(241,169,48)" rx="2" ry="2" />
<text  x="1192.57" y="223.5" ></text>
</g>
<g >
<title>search_binary_handler (6 samples, 0.04%)</title><rect x="1189.6" y="165" width="0.4" height="15.0" fill="rgb(235,116,15)" rx="2" ry="2" />
<text  x="1192.57" y="175.5" ></text>
</g>
<g >
<title>net_rx_action (2 samples, 0.01%)</title><rect x="1040.0" y="165" width="0.2" height="15.0" fill="rgb(218,99,32)" rx="2" ry="2" />
<text  x="1043.02" y="175.5" ></text>
</g>
<g >
<title>do_softirq_own_stack (2 samples, 0.01%)</title><rect x="326.6" y="213" width="0.1" height="15.0" fill="rgb(238,150,29)" rx="2" ry="2" />
<text  x="329.55" y="223.5" ></text>
</g>
<g >
<title>std::generate_canonical&lt;double, 53ul, std::mersenne_twister_engine&lt;unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul&gt; &gt; (960 samples, 5.79%)</title><rect x="1120.7" y="277" width="68.3" height="15.0" fill="rgb(245,71,52)" rx="2" ry="2" />
<text  x="1123.67" y="287.5" >std::ge..</text>
</g>
<g >
<title>handle_edge_irq (4 samples, 0.02%)</title><rect x="859.1" y="229" width="0.3" height="15.0" fill="rgb(238,77,41)" rx="2" ry="2" />
<text  x="862.07" y="239.5" ></text>
</g>
<g >
<title>attdet::quest (140 samples, 0.84%)</title><rect x="330.1" y="245" width="10.0" height="15.0" fill="rgb(225,217,53)" rx="2" ry="2" />
<text  x="333.11" y="255.5" ></text>
</g>
<g >
<title>ath10k_ce_per_engine_service (2 samples, 0.01%)</title><rect x="326.6" y="101" width="0.1" height="15.0" fill="rgb(216,68,50)" rx="2" ry="2" />
<text  x="329.55" y="111.5" ></text>
</g>
<g >
<title>net_rx_action (2 samples, 0.01%)</title><rect x="170.8" y="165" width="0.1" height="15.0" fill="rgb(213,147,13)" rx="2" ry="2" />
<text  x="173.80" y="175.5" ></text>
</g>
<g >
<title>ath10k_pci_napi_poll (2 samples, 0.01%)</title><rect x="1040.0" y="133" width="0.2" height="15.0" fill="rgb(224,173,52)" rx="2" ry="2" />
<text  x="1043.02" y="143.5" ></text>
</g>
<g >
<title>napi_poll (2 samples, 0.01%)</title><rect x="859.4" y="149" width="0.1" height="15.0" fill="rgb(248,174,54)" rx="2" ry="2" />
<text  x="862.36" y="159.5" ></text>
</g>
<g >
<title>BM_TRIAD (1,376 samples, 8.30%)</title><rect x="73.0" y="277" width="97.9" height="15.0" fill="rgb(218,210,25)" rx="2" ry="2" />
<text  x="76.00" y="287.5" >BM_TRIAD</text>
</g>
<g >
<title>asm_common_interrupt (2 samples, 0.01%)</title><rect x="382.7" y="261" width="0.2" height="15.0" fill="rgb(250,33,50)" rx="2" ry="2" />
<text  x="385.71" y="271.5" ></text>
</g>
<g >
<title>std::random_device::_M_init (4 samples, 0.02%)</title><rect x="326.7" y="261" width="0.3" height="15.0" fill="rgb(228,85,23)" rx="2" ry="2" />
<text  x="329.69" y="271.5" ></text>
</g>
<g >
<title>__cos_fma (255 samples, 1.54%)</title><rect x="364.7" y="277" width="18.2" height="15.0" fill="rgb(221,204,8)" rx="2" ry="2" />
<text  x="367.70" y="287.5" ></text>
</g>
<g >
<title>asm_common_interrupt (6 samples, 0.04%)</title><rect x="859.1" y="261" width="0.4" height="15.0" fill="rgb(206,105,54)" rx="2" ry="2" />
<text  x="862.07" y="271.5" ></text>
</g>
<g >
<title>asm_common_interrupt (2 samples, 0.01%)</title><rect x="170.8" y="261" width="0.1" height="15.0" fill="rgb(232,135,16)" rx="2" ry="2" />
<text  x="173.80" y="271.5" ></text>
</g>
<g >
<title>__do_execve_file (6 samples, 0.04%)</title><rect x="1189.6" y="197" width="0.4" height="15.0" fill="rgb(251,62,46)" rx="2" ry="2" />
<text  x="1192.57" y="207.5" ></text>
</g>
<g >
<title>common_interrupt (6 samples, 0.04%)</title><rect x="859.1" y="245" width="0.4" height="15.0" fill="rgb(229,144,29)" rx="2" ry="2" />
<text  x="862.07" y="255.5" ></text>
</g>
<g >
<title>ath10k_pci_wake.part.0 (2 samples, 0.01%)</title><rect x="859.1" y="149" width="0.1" height="15.0" fill="rgb(243,65,34)" rx="2" ry="2" />
<text  x="862.07" y="159.5" ></text>
</g>
<g >
<title>__ieee754_logl (296 samples, 1.79%)</title><rect x="382.9" y="277" width="21.0" height="15.0" fill="rgb(230,209,10)" rx="2" ry="2" />
<text  x="385.86" y="287.5" ></text>
</g>
<g >
<title>do_syscall_64 (6 samples, 0.04%)</title><rect x="1189.6" y="245" width="0.4" height="15.0" fill="rgb(243,163,48)" rx="2" ry="2" />
<text  x="1192.57" y="255.5" ></text>
</g>
<g >
<title>net_rx_action (2 samples, 0.01%)</title><rect x="326.6" y="165" width="0.1" height="15.0" fill="rgb(251,91,12)" rx="2" ry="2" />
<text  x="329.55" y="175.5" ></text>
</g>
<g >
<title>ath10k_bus_pci_read32 (2 samples, 0.01%)</title><rect x="859.1" y="165" width="0.1" height="15.0" fill="rgb(247,137,48)" rx="2" ry="2" />
<text  x="862.07" y="175.5" ></text>
</g>
<g >
<title>__sin_fma (265 samples, 1.60%)</title><rect x="407.2" y="277" width="18.9" height="15.0" fill="rgb(233,95,29)" rx="2" ry="2" />
<text  x="410.20" y="287.5" ></text>
</g>
<g >
<title>__logl (40 samples, 0.24%)</title><rect x="403.9" y="277" width="2.9" height="15.0" fill="rgb(206,106,6)" rx="2" ry="2" />
<text  x="406.93" y="287.5" ></text>
</g>
<g >
<title>ath10k_pci_process_rx_cb (2 samples, 0.01%)</title><rect x="326.6" y="69" width="0.1" height="15.0" fill="rgb(243,184,10)" rx="2" ry="2" />
<text  x="329.55" y="79.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (6 samples, 0.04%)</title><rect x="1189.6" y="261" width="0.4" height="15.0" fill="rgb(233,172,17)" rx="2" ry="2" />
<text  x="1192.57" y="271.5" ></text>
</g>
<g >
<title>ath10k_pci_napi_poll (2 samples, 0.01%)</title><rect x="170.8" y="133" width="0.1" height="15.0" fill="rgb(238,180,10)" rx="2" ry="2" />
<text  x="173.80" y="143.5" ></text>
</g>
<g >
<title>attdet::triad (1,119 samples, 6.75%)</title><rect x="1040.3" y="277" width="79.7" height="15.0" fill="rgb(251,61,35)" rx="2" ry="2" />
<text  x="1043.30" y="287.5" >attdet::t..</text>
</g>
<g >
<title>irq_exit_rcu (2 samples, 0.01%)</title><rect x="1040.0" y="229" width="0.2" height="15.0" fill="rgb(209,179,17)" rx="2" ry="2" />
<text  x="1043.02" y="239.5" ></text>
</g>
<g >
<title>[unknown] (530 samples, 3.20%)</title><rect x="327.0" y="277" width="37.7" height="15.0" fill="rgb(221,153,26)" rx="2" ry="2" />
<text  x="329.98" y="287.5" >[un..</text>
</g>
<g >
<title>asm_call_sysvec_on_stack (2 samples, 0.01%)</title><rect x="859.4" y="197" width="0.1" height="15.0" fill="rgb(243,64,2)" rx="2" ry="2" />
<text  x="862.36" y="207.5" ></text>
</g>
<g >
<title>ath10k_pci_napi_poll (2 samples, 0.01%)</title><rect x="326.6" y="133" width="0.1" height="15.0" fill="rgb(226,172,5)" rx="2" ry="2" />
<text  x="329.55" y="143.5" ></text>
</g>
<g >
<title>asm_sysvec_apic_timer_interrupt (2 samples, 0.01%)</title><rect x="1040.2" y="261" width="0.1" height="15.0" fill="rgb(215,131,15)" rx="2" ry="2" />
<text  x="1043.16" y="271.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (2 samples, 0.01%)</title><rect x="326.6" y="181" width="0.1" height="15.0" fill="rgb(237,87,11)" rx="2" ry="2" />
<text  x="329.55" y="191.5" ></text>
</g>
<g >
<title>x86_pmu_enable (5 samples, 0.03%)</title><rect x="1189.6" y="69" width="0.4" height="15.0" fill="rgb(244,200,33)" rx="2" ry="2" />
<text  x="1192.64" y="79.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (2 samples, 0.01%)</title><rect x="1040.0" y="181" width="0.2" height="15.0" fill="rgb(227,227,23)" rx="2" ry="2" />
<text  x="1043.02" y="191.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (2 samples, 0.01%)</title><rect x="406.8" y="277" width="0.1" height="15.0" fill="rgb(217,4,47)" rx="2" ry="2" />
<text  x="409.77" y="287.5" ></text>
</g>
<g >
<title>perf (6 samples, 0.04%)</title><rect x="1189.6" y="293" width="0.4" height="15.0" fill="rgb(208,73,36)" rx="2" ry="2" />
<text  x="1192.57" y="303.5" ></text>
</g>
<g >
<title>native_write_msr (5 samples, 0.03%)</title><rect x="1189.6" y="37" width="0.4" height="15.0" fill="rgb(222,159,5)" rx="2" ry="2" />
<text  x="1192.64" y="47.5" ></text>
</g>
<g >
<title>sin@plt (2 samples, 0.01%)</title><rect x="1120.4" y="277" width="0.1" height="15.0" fill="rgb(227,22,27)" rx="2" ry="2" />
<text  x="1123.38" y="287.5" ></text>
</g>
<g >
<title>sysvec_apic_timer_interrupt (2 samples, 0.01%)</title><rect x="1040.2" y="245" width="0.1" height="15.0" fill="rgb(218,14,18)" rx="2" ry="2" />
<text  x="1043.16" y="255.5" ></text>
</g>
<g >
<title>intel_tfa_pmu_enable_all (5 samples, 0.03%)</title><rect x="1189.6" y="53" width="0.4" height="15.0" fill="rgb(224,137,22)" rx="2" ry="2" />
<text  x="1192.64" y="63.5" ></text>
</g>
<g >
<title>asm_common_interrupt (2 samples, 0.01%)</title><rect x="1040.0" y="261" width="0.2" height="15.0" fill="rgb(240,71,42)" rx="2" ry="2" />
<text  x="1043.02" y="271.5" ></text>
</g>
<g >
<title>std::random_device::_M_getval (8 samples, 0.05%)</title><rect x="1189.0" y="277" width="0.6" height="15.0" fill="rgb(235,145,46)" rx="2" ry="2" />
<text  x="1192.00" y="287.5" ></text>
</g>
<g >
<title>perf_event_exec (6 samples, 0.04%)</title><rect x="1189.6" y="117" width="0.4" height="15.0" fill="rgb(205,64,47)" rx="2" ry="2" />
<text  x="1192.57" y="127.5" ></text>
</g>
<g >
<title>asm_call_sysvec_on_stack (2 samples, 0.01%)</title><rect x="170.8" y="197" width="0.1" height="15.0" fill="rgb(218,96,27)" rx="2" ry="2" />
<text  x="173.80" y="207.5" ></text>
</g>
<g >
<title>do_softirq_own_stack (2 samples, 0.01%)</title><rect x="859.4" y="213" width="0.1" height="15.0" fill="rgb(228,30,12)" rx="2" ry="2" />
<text  x="862.36" y="223.5" ></text>
</g>
<g >
<title>handle_irq_event (4 samples, 0.02%)</title><rect x="859.1" y="213" width="0.3" height="15.0" fill="rgb(234,92,4)" rx="2" ry="2" />
<text  x="862.07" y="223.5" ></text>
</g>
<g >
<title>asm_common_interrupt (3 samples, 0.02%)</title><rect x="326.5" y="261" width="0.2" height="15.0" fill="rgb(247,186,0)" rx="2" ry="2" />
<text  x="329.48" y="271.5" ></text>
</g>
<g >
<title>common_interrupt (2 samples, 0.01%)</title><rect x="1040.0" y="245" width="0.2" height="15.0" fill="rgb(248,168,44)" rx="2" ry="2" />
<text  x="1043.02" y="255.5" ></text>
</g>
<g >
<title>alglin::inverse&lt;double&gt; (856 samples, 5.16%)</title><rect x="441.7" y="277" width="60.9" height="15.0" fill="rgb(216,83,1)" rx="2" ry="2" />
<text  x="444.65" y="287.5" >alglin..</text>
</g>
<g >
<title>irq_exit_rcu (2 samples, 0.01%)</title><rect x="170.8" y="229" width="0.1" height="15.0" fill="rgb(213,18,27)" rx="2" ry="2" />
<text  x="173.80" y="239.5" ></text>
</g>
<g >
<title>irq_exit_rcu (2 samples, 0.01%)</title><rect x="326.6" y="229" width="0.1" height="15.0" fill="rgb(247,49,8)" rx="2" ry="2" />
<text  x="329.55" y="239.5" ></text>
</g>
<g >
<title>exc_page_fault (2 samples, 0.01%)</title><rect x="407.1" y="245" width="0.1" height="15.0" fill="rgb(246,160,22)" rx="2" ry="2" />
<text  x="410.06" y="255.5" ></text>
</g>
<g >
<title>BM_QUEST (43 samples, 0.26%)</title><rect x="327.0" y="245" width="3.0" height="15.0" fill="rgb(253,6,5)" rx="2" ry="2" />
<text  x="329.98" y="255.5" ></text>
</g>
<g >
<title>load_elf_binary (6 samples, 0.04%)</title><rect x="1189.6" y="149" width="0.4" height="15.0" fill="rgb(242,167,48)" rx="2" ry="2" />
<text  x="1192.57" y="159.5" ></text>
</g>
<g >
<title>[unknown] (6 samples, 0.04%)</title><rect x="1189.6" y="277" width="0.4" height="15.0" fill="rgb(221,28,30)" rx="2" ry="2" />
<text  x="1192.57" y="287.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (2 samples, 0.01%)</title><rect x="170.8" y="181" width="0.1" height="15.0" fill="rgb(248,142,41)" rx="2" ry="2" />
<text  x="173.80" y="191.5" ></text>
</g>
<g >
<title>std::random_device::_M_init (306 samples, 1.85%)</title><rect x="342.9" y="261" width="21.8" height="15.0" fill="rgb(248,18,49)" rx="2" ry="2" />
<text  x="345.92" y="271.5" >s..</text>
</g>
<g >
<title>attdet::quest (2,540 samples, 15.32%)</title><rect x="859.5" y="277" width="180.8" height="15.0" fill="rgb(241,192,40)" rx="2" ry="2" />
<text  x="862.50" y="287.5" >attdet::quest</text>
</g>
<g >
<title>do_softirq_own_stack (2 samples, 0.01%)</title><rect x="1040.0" y="213" width="0.2" height="15.0" fill="rgb(240,0,20)" rx="2" ry="2" />
<text  x="1043.02" y="223.5" ></text>
</g>
<g >
<title>asm_call_sysvec_on_stack (2 samples, 0.01%)</title><rect x="1040.0" y="197" width="0.2" height="15.0" fill="rgb(229,13,4)" rx="2" ry="2" />
<text  x="1043.02" y="207.5" ></text>
</g>
<g >
<title>do_softirq_own_stack (2 samples, 0.01%)</title><rect x="170.8" y="213" width="0.1" height="15.0" fill="rgb(238,163,26)" rx="2" ry="2" />
<text  x="173.80" y="223.5" ></text>
</g>
<g >
<title>ath10k_pci_napi_poll (2 samples, 0.01%)</title><rect x="859.4" y="133" width="0.1" height="15.0" fill="rgb(215,210,4)" rx="2" ry="2" />
<text  x="862.36" y="143.5" ></text>
</g>
<g >
<title>attdet-benchmar (16,571 samples, 99.96%)</title><rect x="10.0" y="293" width="1179.6" height="15.0" fill="rgb(231,151,2)" rx="2" ry="2" />
<text  x="13.00" y="303.5" >attdet-benchmar</text>
</g>
<g >
<title>all (16,577 samples, 100%)</title><rect x="10.0" y="309" width="1180.0" height="15.0" fill="rgb(206,193,49)" rx="2" ry="2" />
<text  x="13.00" y="319.5" ></text>
</g>
<g >
<title>perf_event_enable_on_exec (5 samples, 0.03%)</title><rect x="1189.6" y="101" width="0.4" height="15.0" fill="rgb(233,19,7)" rx="2" ry="2" />
<text  x="1192.64" y="111.5" ></text>
</g>
<g >
<title>ath10k_ce_per_engine_service_any (2 samples, 0.01%)</title><rect x="326.6" y="117" width="0.1" height="15.0" fill="rgb(251,88,54)" rx="2" ry="2" />
<text  x="329.55" y="127.5" ></text>
</g>
<g >
<title>exec_binprm (6 samples, 0.04%)</title><rect x="1189.6" y="181" width="0.4" height="15.0" fill="rgb(220,224,6)" rx="2" ry="2" />
<text  x="1192.57" y="191.5" ></text>
</g>
<g >
<title>napi_poll (2 samples, 0.01%)</title><rect x="170.8" y="149" width="0.1" height="15.0" fill="rgb(237,185,50)" rx="2" ry="2" />
<text  x="173.80" y="159.5" ></text>
</g>
<g >
<title>__strlen_avx2 (35 samples, 0.21%)</title><rect x="340.1" y="261" width="2.5" height="15.0" fill="rgb(239,2,43)" rx="2" ry="2" />
<text  x="343.08" y="271.5" ></text>
</g>
<g >
<title>alglin::operator*&lt;double, 3, 3, 3&gt; (5,014 samples, 30.25%)</title><rect x="502.6" y="277" width="356.9" height="15.0" fill="rgb(221,198,50)" rx="2" ry="2" />
<text  x="505.59" y="287.5" >alglin::operator*&lt;double, 3, 3, 3&gt;</text>
</g>
<g >
<title>irq_exit_rcu (2 samples, 0.01%)</title><rect x="859.4" y="229" width="0.1" height="15.0" fill="rgb(207,200,17)" rx="2" ry="2" />
<text  x="862.36" y="239.5" ></text>
</g>
<g >
<title>ath10k_pci_interrupt_handler (4 samples, 0.02%)</title><rect x="859.1" y="181" width="0.3" height="15.0" fill="rgb(230,94,26)" rx="2" ry="2" />
<text  x="862.07" y="191.5" ></text>
</g>
<g >
<title>__memset_avx2_erms (4 samples, 0.02%)</title><rect x="406.9" y="277" width="0.3" height="15.0" fill="rgb(209,36,5)" rx="2" ry="2" />
<text  x="409.92" y="287.5" ></text>
</g>
<g >
<title>net_rx_action (2 samples, 0.01%)</title><rect x="859.4" y="165" width="0.1" height="15.0" fill="rgb(251,205,42)" rx="2" ry="2" />
<text  x="862.36" y="175.5" ></text>
</g>
<g >
<title>asm_call_sysvec_on_stack (2 samples, 0.01%)</title><rect x="326.6" y="197" width="0.1" height="15.0" fill="rgb(237,84,12)" rx="2" ry="2" />
<text  x="329.55" y="207.5" ></text>
</g>
<g >
<title>BM_QUEST (885 samples, 5.34%)</title><rect x="10.0" y="277" width="63.0" height="15.0" fill="rgb(241,17,6)" rx="2" ry="2" />
<text  x="13.00" y="287.5" >BM_QUEST</text>
</g>
<g >
<title>logl@plt (3 samples, 0.02%)</title><rect x="1120.2" y="277" width="0.2" height="15.0" fill="rgb(210,22,37)" rx="2" ry="2" />
<text  x="1123.17" y="287.5" ></text>
</g>
<g >
<title>common_interrupt (3 samples, 0.02%)</title><rect x="326.5" y="245" width="0.2" height="15.0" fill="rgb(220,202,52)" rx="2" ry="2" />
<text  x="329.48" y="255.5" ></text>
</g>
<g >
<title>alglin::cofactor&lt;double&gt; (218 samples, 1.32%)</title><rect x="426.1" y="277" width="15.6" height="15.0" fill="rgb(228,139,32)" rx="2" ry="2" />
<text  x="429.14" y="287.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (2 samples, 0.01%)</title><rect x="859.4" y="181" width="0.1" height="15.0" fill="rgb(239,154,1)" rx="2" ry="2" />
<text  x="862.36" y="191.5" ></text>
</g>
<g >
<title>common_interrupt (2 samples, 0.01%)</title><rect x="382.7" y="245" width="0.2" height="15.0" fill="rgb(209,77,33)" rx="2" ry="2" />
<text  x="385.71" y="255.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.28] (2,192 samples, 13.22%)</title><rect x="170.9" y="277" width="156.1" height="15.0" fill="rgb(240,120,19)" rx="2" ry="2" />
<text  x="173.94" y="287.5" >[libstdc++.so.6.0.28]</text>
</g>
<g >
<title>napi_poll (2 samples, 0.01%)</title><rect x="1040.0" y="149" width="0.2" height="15.0" fill="rgb(242,70,4)" rx="2" ry="2" />
<text  x="1043.02" y="159.5" ></text>
</g>
<g >
<title>ctx_resched (5 samples, 0.03%)</title><rect x="1189.6" y="85" width="0.4" height="15.0" fill="rgb(245,189,12)" rx="2" ry="2" />
<text  x="1192.64" y="95.5" ></text>
</g>
<g >
<title>ath10k_pci_htc_rx_cb (2 samples, 0.01%)</title><rect x="326.6" y="85" width="0.1" height="15.0" fill="rgb(233,225,11)" rx="2" ry="2" />
<text  x="329.55" y="95.5" ></text>
</g>
<g >
<title>asm_exc_page_fault (2 samples, 0.01%)</title><rect x="407.1" y="261" width="0.1" height="15.0" fill="rgb(211,36,43)" rx="2" ry="2" />
<text  x="410.06" y="271.5" ></text>
</g>
<g >
<title>begin_new_exec (6 samples, 0.04%)</title><rect x="1189.6" y="133" width="0.4" height="15.0" fill="rgb(225,115,29)" rx="2" ry="2" />
<text  x="1192.57" y="143.5" ></text>
</g>
<g >
<title>napi_poll (2 samples, 0.01%)</title><rect x="326.6" y="149" width="0.1" height="15.0" fill="rgb(243,151,26)" rx="2" ry="2" />
<text  x="329.55" y="159.5" ></text>
</g>
</g>
</svg>
